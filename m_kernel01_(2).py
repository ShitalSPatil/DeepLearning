# -*- coding: utf-8 -*-
"""m_kernel01 (2).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1829d1F9PVKKklXcTVe-83_6h17gyu0AE
"""

# This Python 3 environment comes with many helpful analytics libraries installed
# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python
# For example, here's several helpful packages to load

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

# Input data files are available in the read-only "../input/" directory
# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory

import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

# You can write up to 5GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using "Save & Run All" 
# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session

os.chdir("../../input")

import zipfile

'''with zipfile.ZipFile('../input/dogs-vs-cats/train.zip',"r") as z:
    z.extractall("../working")
    print("{} unzipped".format(zip_file))'''
z = zipfile.ZipFile('../input/dogs-vs-cats/test1.zip',"r")
z.extractall('../working')

len(os.listdir('../working/test1'))

import tensorflow as tf

tf.__version__

train_datagen = tf.keras.preprocessing.image.ImageDataGenerator(
        rescale=1./255,
        shear_range=0.2,
        zoom_range=0.2,
        horizontal_flip=True)

train_datagen.flow_from_directory('../working/train/',target_size=(224,224),batch_size=32,class_mode='categorical')

os.listdir('../working/train')[0].split('.')[0]

filenames = os.listdir("../working/train")
categories = []
for filename in filenames:
    category = filename.split('.')[0]
    categories.append(category)

df = pd.DataFrame({
    'filename': filenames,
    'category': categories
})
df.head(5)

train_data=train_datagen.flow_from_dataframe(df,'../working/train/',x_col='filename',y_col='category',
                                  target_size=(224,224),batch_size=32,class_mode='categorical')

train_data.class_indices

vgg = tf.keras.applications.VGG16(input_shape=[224,224,3],weights='imagenet',include_top=False)

for layer in vgg.layers:
    layer.trainable = False

from tensorflow.keras.layers import Flatten, Dense
from tensorflow.keras.models import Model

model = Flatten()(vgg.output)
final_model = Dense(2,activation='softmax')(model)

model = Model(inputs = vgg.input,outputs = final_model)

model.compile(loss='categorical_crossentropy',optimizer='adam',metrics = ['accuracy'])

test_data_gen = tf.keras.preprocessing.image.ImageDataGenerator(rescale=1/255.0)

filenames = os.listdir("../working/test1")
categories = []
for filename in filenames:
    category = filename.split('.')[0]
    categories.append(category)

df1 = pd.DataFrame({
    'filename': filenames,
    'category': categories
})
df1.head(5)

model.fit_generator(train_data,epochs=5,steps_per_epoch=len(train_data))

# import cv2
# file=[]
# category=[]
# filenames = os.listdir("../working/test1")
# for image in filenames:
#     #print('../working/test1'+image)
#     img = cv2.imread('../working/test1/'+image)
#     img = cv2.resize(img,(224,224))
#     img = img/255.0
#     cls = model.predict(img.reshape(1,224,224,3)).argmax()
#     if cls==0:
#         category.append('cat')
#     else:
#         category.append('dog')
#     file.append(image)

img = cv2.imread('../working/test1/101.jpg')
img = cv2.resize(img,(224,224))
img = img/255.0
model.predict(img.reshape(1,224,224,3)).argmax()

import matplotlib.pyplot as plt

plt.imshow(img)

import pandas as pd
ser1 = pd.Series(data = file)

df_submit = pd.DataFrame(ser1,columns=['filename'])

df_submit['category'] = category

df_submit.head(5)

def fun1(X):
    if X=='cat':
        return 0
    else:
        return 1
df_submit['cat'] = df_submit['category'].apply(fun1)

df_submit['id'] = df_submit['filename'].apply(lambda X: X.split('.')[0])

df_submit['label'] = df_submit['cat']

df_submit[['id','label']].to_csv('../working/submit.csv')

os.do