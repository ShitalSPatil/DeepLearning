# -*- coding: utf-8 -*-
"""NNusingTF.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Gb4UYBDdq3hyfhPi5rmPvvNE0S_Ry9N1
"""

# Commented out IPython magic to ensure Python compatibility.
#one neuron structure
# %tensorflow_version 1.x
import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt

x = tf.placeholder(tf.float32,shape=(None,10))
w = tf.Variable(tf.random_normal((10,3)),dtype=tf.float32)
b = tf.Variable(tf.zeros(3),dtype=tf.float32)

y = tf.add(tf.matmul(x,w),b)
a = tf.sigmoid(y)

init = tf.global_variables_initializer()
sess = tf.Session()
sess.run(init)

sess.run(a,feed_dict={x:np.random.rand(2,10)})

#linear regretion model

x_train = np.linspace(0,10,50) + np.random.rand(50)
y_train = (x_train * 0.5) + 1 + np.random.rand(50)/3

plt.scatter(x_train,y_train)

w = tf.Variable(np.random.rand(1),dtype=tf.float32)
b = tf.Variable(0,dtype=tf.float32)

error = 0
for xi,yi in zip(x_train,y_train):
  y_pred = xi * w + b
  error += (yi - y_pred)**2/50

optimizer = tf.train.GradientDescentOptimizer(0.001)
train = optimizer.minimize(error)

init = tf.global_variables_initializer()
sess = tf.Session()
sess.run(init)
for i in range(3500):
  sess.run(train)

sess.run(w),sess.run(b)

