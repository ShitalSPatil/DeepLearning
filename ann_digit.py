# -*- coding: utf-8 -*-
"""ANN_digit.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1E6VA_kAkvrP9CQOfyULujI6ra_OE9xRF
"""

import numpy as np
import keras

from keras.datasets import mnist
(trainX,trainy),(testX,testy)=mnist.load_data()

trainX.shape,testX.shape,trainy,testy

import matplotlib.pyplot as plt

plt.imshow(trainX[0])

trainy[0]

plt.imshow(trainX[100])

trainy[100]

from keras.models import Sequential
from keras.layers import Dense
from keras.layers import Dropout,Conv2D, MaxPooling2D
from keras.utils import np_utils

trainX=trainX.reshape((trainX.shape[0],28*28)).astype('float32')
testX=testX.reshape((testX.shape[0],28*28)).astype('float32')

type(trainX)

trainX[0,:]

X_train=trainX/255
X_test=testX/255

X_train[0,:]

trainy

y_train=np_utils.to_categorical(trainy)
y_test=np_utils.to_categorical(testy)
num_classes=10

def ANN_model():
  model=Sequential()
  model.add(Dense(28*28,input_dim=28*28,kernel_initializer='normal',activation='relu'))
  model.add(Dense(num_classes,kernel_initializer='normal',activation='softmax'))
  model.compile(loss='categorical_crossentropy',optimizer='adam',metrics=['accuracy'])
  return model

ANNmodel=ANN_model()
ANNmodel.fit(X_train,y_train,validation_data=(X_test,y_test),epochs=10,batch_size=200,verbose=2)
scores=ANNmodel.evaluate(X_test,y_test,verbose=0)

import imageio

im=imageio.imread("https://i.imgur.com/a3Rql9C.png")

gray=np.dot(im[...,:3], [0.299, 0.587, 0.114])

plt.imshow(gray,cmap=plt.get_cmap('gray'))

plt.show()

gray=gray.reshape(1,28,28,1)
gray=gray/255

from keras.models import load_model
model = load_model("")
prediction = model.predict(gray)
print(prediction.argmax())



